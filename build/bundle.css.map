{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\..\\App.svelte"
  ],
  "sourcesContent": [
    "<script>\nimport { scaleLinear, scaleLog } from 'd3-scale'\nimport { line, curveBasisOpen } from 'd3-shape'\nimport { path } from 'd3-path'\nimport { phons } from './phons'\nimport { marks, regions, types, tags, values, octaves } from './data'\n\nconst w = 1200\nconst h = 600\nconst fontSize = 20\nconst marginalFontSize = 16\nconst tagFontSize = 20\nconst octaveFontSize = 26\nconst octaveFromFontSize = 12\nconst fontBoxMargin = 12\nconst fontBoxDistance = (h - fontBoxMargin) / 7\nconst fontBox = fontBoxDistance - fontBoxMargin\nconst margin = fontBoxDistance / 2\n\nlet useLog = true\nlet scale\nlet loudnessLine\n\nconst domain = [16, 2e4]\nconst range = [margin, w - margin]\n\nconst loudness = [0, 20, 40, 60, 80, 100].map(p => phons(p))\nconst loudnessY = scaleLinear([-10, 130], [h - fontBoxDistance, fontBoxDistance])\nloudnessLine = line().y(function (d) { return loudnessY(d.Lp) }).curve(curveBasisOpen)\n\nswitchScale()\n\nfunction switchScale () {\n  scale = useLog\n    ? scaleLog(domain, range)\n    : scaleLinear(domain, range)\n  loudnessLine.x(function (d) { return scale(d.f) })\n  loudnessLine = loudnessLine\n  useLog = !useLog\n}\n\nfunction formatHz (v) {\n  return v >= 1000 ? v / 1000 + 'k' : v\n}\n\nfunction roundHz (v) {\n  return v.toFixed(2).replace(/0$/, '').replace(/0$/, '').replace(/\\.$/, '')\n}\n</script>\n\n<main>\n  <svg width={w} height={h} on:click={switchScale} font-family=\"'Droid Sans', sans-serif\" font-size=\"{fontSize}\">\n    {#each regions as region}\n      <rect fill=\"{region.bg}\"\n            fill-opacity=\"0.5\"\n            style=\"transform: translate3d({ scale(region.from) }px, 0, 0) scaleX({ scale(region.to) - scale(region.from)});\"\n            x=\"0\" y={fontBoxDistance * 1} width=\"1\" height={h - fontBoxDistance * 2}/>\n      <text style=\"transform: translate3d({ (scale(region.from) + scale(region.to)) / 2 }px, 0, 0)\" x=\"0\"\n            y={h - fontBoxDistance * 1.5 - fontBoxMargin / 2}\n            opacity={useLog ? (region.to >= 3000) ? 0.87 : 0 : 0.87}\n            alignment-baseline=\"middle\"\n            font-weight=\"bold\"\n            text-anchor=\"middle\" fill=\"#000\">{region.title}</text>\n    {/each}\n\n    {#each marks as { value, line } }\n      <text style=\"transform: translate3d({ scale(value) }px, 0, 0)\" x=\"0\" y={fontBoxDistance * .5 + fontBoxMargin / 2}\n            alignment-baseline=\"middle\"\n            font-size={line >= 0 ? marginalFontSize : fontSize}\n            fill-opacity={ line >= 0 ? 1 : 0.87 }\n            font-weight={ line >= 0 ? 'normal' : 'bold'}\n            opacity={useLog ? (value >= 1000 || value <= 16) ? 1 : 0 : 1}\n            dy={line >= 0 ? (fontBoxDistance * 2) / 6 : 0}\n            text-anchor=\"middle\" fill=\"#000\">{formatHz(value)}</text>\n      {#if !(line >= 0)}\n        <text style=\"transform: translate3d({ scale(value) }px, 0, 0)\" x=\"0\" y={h - fontBoxDistance * .5}\n              alignment-baseline=\"middle\"\n              fill-opacity=\"0.87\"\n              font-weight={ line >= 0 ? 'normal' : 'bold'}\n              font-size={line >= 0 ? marginalFontSize : fontSize}\n              opacity={useLog ? (value >= 1000 || value <= 16) ? 1 : 0 : 1}\n              text-anchor=\"middle\" fill=\"#000\">{formatHz(value)}</text>\n      {/if}\n      <line style=\"transform: translate3d({ scale(value) }px, 0, 0);\"\n            stroke-width=\"1\"\n            stroke=\"#000\"\n            stroke-opacity=\"0.66\"\n            x1=\"0\" y1={fontBoxDistance + (line >= 0 ? 0 : (-fontBoxDistance * 0.5 + fontBoxMargin * 1.5))} x2=\"0\"\n            y2={(line >= 0 ? (line + 2) * fontBoxDistance: h - fontBoxDistance) - (line >= 0 ? 0 : (-fontBoxDistance * 0.5 + fontBoxMargin * 1.5)) }/>\n    {/each}\n\n    {#each types as type}\n      <rect fill=\"#fff\"\n            fill-opacity=\"0.87\"\n            style=\"transform: translate3d({ scale(type.from) + 4 }px, 0, 0) scaleX({ scale(type.to) - scale(type.from) - 8});\"\n            x=\"0\" y={h - fontBoxDistance * 3} width=\"1\" height={fontBox}/>\n      <text style=\"transform: translate3d({ (scale(type.from) + scale(type.to)) / 2 }px, 0, 0)\" x=\"0\"\n            y={h - fontBoxDistance * 2.5 - fontBoxMargin / 2}\n            alignment-baseline=\"middle\"\n            opacity={useLog ? (type.to >= 1000) ? 1 : 0 : 1}\n            text-anchor=\"middle\" fill=\"#000\">{type.title}</text>\n    {/each}\n\n    {#each values as value}\n      <line style=\"transform: translate3d({ scale(value.freq) }px, 0, 0);\"\n            stroke=\"{!value.note ? 'rgba(64,64,64, 0.5)' : '#000'}\"\n            opacity={useLog && (value.freq) < 555 ? 0 : 1}\n            x1=\"0\"\n            y1={h - 4 * fontBoxDistance + fontBoxMargin * 1.5}\n            x2=\"0\"\n            y2={h - 3 * fontBoxDistance - fontBoxMargin * (value.note === 8 ? 1 : 2.5)}/>\n    {/each}\n\n    {#each tags as tag, i}\n      <rect fill=\"#fff\"\n            fill-opacity=\"0.87\"\n            style=\"transform: translate3d({ scale(tag.from) + 4 }px, 0, 0) scaleX({ scale(tag.to) - scale(tag.from) - 8});\"\n            x=\"0\" y={fontBoxDistance * 1 + fontBoxDistance * tag.line + fontBoxMargin} width=\"1\" height={fontBox}/>\n      <g style=\"transform: translate3d({ (scale(tag.from) + scale(tag.to)) / 2 }px, 0, 0)\">\n        <text\n          x=\"0\"\n          y={fontBoxDistance * 1.5 + fontBoxDistance * tag.line + fontBoxMargin / 2}\n          alignment-baseline=\"middle\"\n          transform=\"rotate({tag.angle || 0} 0,{fontBoxDistance * 1.5 + fontBoxDistance * tag.line + fontBoxMargin / 2})\"\n          opacity={useLog ? (tag.to > 1000) ? 1 : 0 : 1}\n          font-size={tag.fontSize || tagFontSize}\n          text-anchor=\"middle\" fill=\"#000\">{tag.title}</text>\n      </g>\n    {/each}\n\n    {#each octaves as octave}\n      <rect fill=\"#fff\"\n            fill-opacity=\"0.87\"\n            style=\"transform: translate3d({ scale(octave.from) + 2 }px, 0, 0) scaleX({ scale(octave.to) - scale(octave.from) - 4});\"\n            x=\"0\" y={h - fontBoxDistance * 4} width=\"1\" height={fontBox}/>\n      <text style=\"transform: translate3d({ (scale(octave.from) + scale(octave.to)) / 2 }px, 0, 0)\" x=\"0\"\n            y={h - fontBoxDistance * 3.5 - fontBoxMargin / 2}\n            opacity={useLog ? (octave.to >= 1000) ? 1 : 0 : 1}\n            font-size={octaveFontSize}\n            alignment-baseline=\"middle\"\n            text-anchor=\"middle\" fill=\"#000\">{octave.octave}</text>\n      <text style=\"transform: translate3d({ scale(octave.from) }px, 0, 0)\" x=\"4\"\n            y={h - fontBoxDistance * 4 + fontBoxMargin / 2 + 4}\n            opacity={useLog ? (octave.to >= 1200) ? 1 : 0 : 1}\n            font-size={octaveFromFontSize}\n            alignment-baseline=\"middle\"\n            text-anchor=\"start\" fill=\"#000\">{roundHz(octave.from)}</text>\n    {/each}\n\n    {#each values as value}\n      {#if value.note === 8}\n        <text style=\"transform: translate3d({ scale(value.freq) }px, 0, 0)\" x=\"1\"\n              y={h - fontBoxDistance * 3 - fontBoxMargin * 1.5 - 2}\n              opacity={useLog ? (value.freq >= 3000) ? 1 : 0 : 1}\n              font-size={octaveFromFontSize}\n              alignment-baseline=\"middle\"\n              text-anchor=\"start\" fill=\"#000\">{roundHz(value.freq)}</text>\n      {/if}\n    {/each}\n\n    {#each loudness as l}\n      <path d={loudnessLine(l)} fill=\"none\" stroke-width=\"5\" stroke=\"#000\" stroke-opacity=\"0.12\" stroke-dasharray=\"1 9\"\n            stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n    {/each}\n\n    {#each [0, 20, 40, 60, 80, 100, 120] as tick}\n      <line x1={scale(2e4)} y1={loudnessY(tick)} x2={scale(2e4) - 5} y2={loudnessY(tick)} stroke=\"#000\"\n            stroke-width=\"1\"/>\n      <text x={scale(2e4) + 4} y={loudnessY(tick)} alignment-baseline=\"central\"\n            font-size={marginalFontSize}>{tick}</text>\n    {/each}\n\n    {#each [20, 30, 40, 50, 70, 80, 90, 200, 300, 400, 500, 700, 800, 900, 3000, 5000, 7000, 8000, 9000] as tick}\n      <line x1=\"0\" y1={fontBoxDistance} x2=\"0\" y2={fontBoxDistance + 5}\n            style=\"transform: translate3d({scale(tick)}px, 0, 0)\"\n            opacity={useLog ? (tick >= 100) ? 0.87 : 0 : 0.87}\n            stroke=\"#000\"\n            stroke-width=\"1\"/>\n    {/each}\n\n    <text x={scale(16) - fontBoxMargin * 2} y={h-fontBoxDistance * 3.5 - fontBoxMargin / 2}\n          text-anchor=\"middle\"\n          dy=\"8\"\n          transform=\"rotate(-90 {scale(16) - fontBoxMargin * 2},{h-fontBoxDistance * 3.5- fontBoxMargin / 2})\"\n          font-size={marginalFontSize}>octave\n    </text>\n\n    <text x={scale(16) - fontBoxMargin} y={h-fontBoxDistance * 4 - fontBoxMargin}\n          text-anchor=\"middle\"\n          alignment-baseline=\"before-edge\"\n          font-size={marginalFontSize - 2}>C\n    </text>\n\n    <text x={scale(16) - fontBoxMargin} y={h-fontBoxDistance * 3}\n          text-anchor=\"middle\"\n          alignment-baseline=\"after-edge\"\n          font-size={marginalFontSize - 2}>A\n    </text>\n  </svg>\n\n  <div style=\"text-align: end; width: {w}px; display: inline-block;\">\n    Made in Brno 2020, <a href=\"https://github.com/darosh/frequency-chart\">Github</a>\n  </div>\n</main>\n\n<style>\nline, rect, text, g {\n  transition: all 0.8s ease-out;\n}\n\nmain {\n  text-align: center;\n  padding: 1em;\n  max-width: 240px;\n  margin: 0 auto;\n}\n\n@media (min-width: 640px) {\n  main {\n    max-width: none;\n  }\n}\n</style>\n"
  ],
  "names": [],
  "mappings": "AA8MA,kBAAI,CAAE,kBAAI,CAAE,kBAAI,CAAE,CAAC,cAAC,CAAC,AACnB,UAAU,CAAE,GAAG,CAAC,IAAI,CAAC,QAAQ,AAC/B,CAAC,AAED,IAAI,cAAC,CAAC,AACJ,UAAU,CAAE,MAAM,CAClB,OAAO,CAAE,GAAG,CACZ,SAAS,CAAE,KAAK,CAChB,MAAM,CAAE,CAAC,CAAC,IAAI,AAChB,CAAC,AAED,MAAM,AAAC,YAAY,KAAK,CAAC,AAAC,CAAC,AACzB,IAAI,cAAC,CAAC,AACJ,SAAS,CAAE,IAAI,AACjB,CAAC,AACH,CAAC"
}